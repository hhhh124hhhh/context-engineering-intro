name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Python code quality check
      run: |
        cd backend
        ruff check .
        black --check .
        isort --check-only .

    - name: TypeScript type check
      run: |
        cd frontend
        npm run type-check

    - name: ESLint check
      run: |
        cd frontend
        npm run lint

    - name: Security audit
      run: |
        cd frontend
        npm audit --audit-level moderate
        cd ../backend
        safety check

  # 前端测试
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # 后端测试
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci
        JWT_SECRET_KEY: test_jwt_secret_key_for_ci
      run: |
        cd backend
        python run_tests.py test
        python run_tests.py coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # 构建和部署
  build-and-deploy:
    needs: [quality-check, frontend-test, backend-test]
    runs-on: ubuntu-latest
    name: Build and Deploy
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-staging:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' && github.event_name != 'release'

    environment:
      name: staging
      url: https://staging.cardbattle.arena

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加实际的部署脚本
        # 例如：kubectl apply -f k8s/staging/ 或 ansible-playbook deploy-staging.yml

    - name: Health check
      run: |
        echo "Performing health check..."
        # 添加健康检查逻辑

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # 添加集成测试

  # 部署到生产环境
  deploy-production:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.event_name == 'release'

    environment:
      name: production
      url: https://cardbattle.arena

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里添加实际的部署脚本

    - name: Health check
      run: |
        echo "Performing health check..."
        # 添加健康检查逻辑

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # 添加冒烟测试

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    name: Performance Test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install locust

    - name: Run performance tests
      run: |
        locust --headless -f scripts/performance/locustfile.py -H https://staging.cardbattle.arena -u 10 -r 10 -t 60 --host https://staging.cardbattle.arena

  # 通知
  notify:
    runs-on: ubuntu-latest
    name: Notify
    needs: [quality-check, frontend-test, backend-test, build-and-deploy]
    if: always()

    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "Build Failed for ${{ github.repository }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: "GitHub Actions <noreply@cardbattle.arena>"
        body: |
          Build failed for ${{ github.repository }}

          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

          View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}