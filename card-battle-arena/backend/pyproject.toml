[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "card-battle-arena"
description = "Web端多人联机卡牌对战游戏后端服务"
version = "1.0.0"
authors = [
    {name = "Card Battle Arena Team", email = "team@cardbattle.arena"},
]
maintainers = [
    {name = "Card Battle Arena Team", email = "team@cardbattle.arena"},
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/cardbattle/card-battle-arena"
repository = "https://github.com/cardbattle/card-battle-arena"
documentation = "https://docs.cardbattle.arena"
keywords = [
    "card-game",
    "multiplayer",
    "fastapi",
    "websocket",
    "real-time",
    "python"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Board Games",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "alembic-postgresql-adapter>=1.3.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.6.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "structlog>=23.1.0",
    "websockets>=12.0",
    "httpx>=0.24.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "safety>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest-watch>=0.22.0",
    "pytest-mock>=3.12.0",
    "pre-commit>=3.4.0",
    "mypy>=1.5.0",
    "sqlalchemy[mypy]>=2.0.0",
]
test = [
    "pytest-xdist>=3.3.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]

[project.urls]
Homepage = "https://cardbattle.arena"
Documentation = "https://docs.cardbattle.arena"
Repository = "https://github.com/cardbattle/card-battle-arena.git"
"Bug Tracker" = "https://github.com/cardbattle/card-battle-arena/issues"

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.envs.default]
path = ".venv"

[tool.hatch.envs.default.dependencies]
pytest = "pytest>=7.4.0"
coverage = "pytest-cov>=4.1.0"

[tool.hatch.envs.test]
dependencies = [
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
]

[tool.hatch.run.test]
parallel = true
kwargs = "-ra -m \"not integration\""

[tool.hatch.run.test.integration]
args = "-ra -m integration"

[tool.hatch.run.coverage]
cmd = "pytest --cov=app --cov-report=html --cov-report=term-missing"
parallel = true
dependencies = "coverage[toml]>=7.0.0"

[tool.hatch.envs.lint]
dependencies = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

[tool.hatch.run.lint]
cmd = "ruff check . && black --check . && isort --check-only . && mypy app"

[tool.hatch.envs.format]
dependencies = [
    "black>=23.0.0",
    "isort>=5.12.0",
]

[tool.hatch.run.format]
cmd = "black . && isort ."

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.ruff]
line-length = 88
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C410", "C401", "C402", "C403", "C404", "C405", "C406", "C408", "C409", "C413", "C414", "C415", "C416", "C417", "C418", "C419", "C420"]
ignore = ["E501", "I001", "I002"]
fix = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "app.*",
    "tests.*",
]
ignore_missing_imports = true

[tool.pytest.ini]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Test"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]
branch = true
show_missing = true
fail_under = 80

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?[abc\\.]?abstractmethod",
]