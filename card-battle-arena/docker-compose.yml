services:
  # PostgreSQL数据库
  postgres:
    image: postgres:14-alpine
    container_name: card-battle-postgres
    environment:
      POSTGRES_DB: card_battle_arena
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - card-battle-network

  # Redis缓存和会话存储
  redis:
    image: redis:6-alpine
    container_name: card-battle-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - card-battle-network
    command: redis-server --appendonly yes

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/development/Dockerfile.backend.simple
    container_name: card-battle-backend
    environment:
      SECRET_KEY: "your-super-secret-key-change-this-in-production-and-make-it-at-least-32-characters-long-12345"
      DATABASE_URL: "postgresql+asyncpg://postgres:postgres@postgres:5432/card_battle_arena"
      REDIS_URL: "redis://redis:6379"
      DEBUG: "true"
      ALLOWED_HOSTS: '["http://localhost:5173", "http://127.0.0.1:5173"]'
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
    networks:
      - card-battle-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/development/Dockerfile.frontend
    container_name: card-battle-frontend
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - card-battle-network
    command: npm run dev
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Nginx反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    container_name: card-battle-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - card-battle-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  card-battle-network:
    driver: bridge